;Owner: k3v1n1k88
;Date Create: 1/10/2018
;This is configuration for my service List Game Ordering

[database_mysql_server]
host = 127.0.0.1
port = 7777
username = root
password = nhakhoahoc

[database_leveldb_server]
host = 127.0.0.1

[database_redis_server]
host = 127.0.0.1
port = 6379
password = nhakhoahoc
ssl = false

[database_mapping_missing_leveldb]

[database_mapping_leveldb]

[database_scoring_redis]

[database_recommendation_redis]



[connection_pool]
block_when_exhausted = true
evictor_shutdown_timeout_millis = 10000
fairness = false
max_wait_millis = -1
min_evictable_idle_time_millis = 1800000
max_total = 100
max_idle = 8
min_idle = 2
max_total_per_key = 8
min_idle_per_key = 0
max_idle_per_key = 8
num_tests_per_eviction_run = 3
soft_min_evictable_idle_time_millis = -1
test_on_create = false
test_on_borrow = false
test_on_return = false
test_while_idle = false
time_between_eviction_runs_millis = -1

;true is LIFO policy, false is FIFO
return_policy = true

[system]
point_per_login = 1
money_per_point = 10000
max_recommend_game = 5

[producer_kafka]
;help producer identify criteria request complete
acks = all  

batch.size = 16384

;list host/port to use for establishing initial connection to kafka cluster
bootstrap.servers = localhost:9092

;size of buffer memory
buffer.memory = 33554432

;type of compressing for all data generate by producer. Valid values are "none", "gzip", "snappy", "lz4"
compression.type = none

;Close idle connections after the number of milliseconds specified by this config.
connections.max.idle.ms = 600000

;true: ensure one copy in bufferstream
;false: producer retries when failure

;linger when producer send
linger.ms = 0

;The configuration controls how long KafkaProducer.send() and KafkaProducer.partitionsFor() will block
max.block.ms = 60000

;The maximum size of a request in bytes
max.request.size = 1048576

;The configuration controls the maximum amount of time the client will wait for the response of a request.
request.timeout.ms = 30000

;Setting a value greater than zero will cause the client to resend any request that fails with a potentially transient error.
retries = 0

;The amount of time to wait before attempting to retry a failed request to a given topic partition.
;This avoids repeatedly sending requests in a tight loop under some failure scenarios.
retry.backoff.ms = 100

;The size of the TCP send buffer (SO_SNDBUF) to use when sending data.
;If the value is -1, the OS default will be used.
send.buffer.bytes = -1

[consumer_kafka]
;What to do when there is no initial offset in Kafka or if
;the current offset does not exist any more on the server
; have values: "earliest", "latest","none" and anything elese(will throw exception to the consumer)
auto.offset.reset = latest

;list host/port to use for establishing initial connection to kafka cluster
bootstrap.servers = localhost:9092


;Close idle connections after the number of milliseconds specified by this config.
connections.max.idle.ms = 600000

;If true the consumer's offset will be periodically committed in the background.
enable.auto.commit = true


fetch.max.bytes = 52428800

;The maximum amount of time the server will block before answering the fetch request 
;if there isn't sufficient data to immediately satisfy the requirement given by fetch.min.bytes.
fetch.max.wait.ms = 500

fetch.min.bytes = 1 

max.partition.fetch.bytes = 1048576

;The maximum delay between invocations of poll() when using consumer group management.
max.poll.interval.ms = 300000

;The maximum number of records returned in a single call to poll().
max.poll.records = 500

;The size of the TCP receive buffer (SO_RCVBUF) to use when reading data. If the value is -1, the OS default will be used.
receive.buffer.bytes = -1

;The configuration controls the maximum amount of time the client will wait for the response of a request.
;If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted.
request.timeout.ms = 40000

;The amount of time to wait before attempting to retry a failed request to a given topic partition. 
;This avoids repeatedly sending requests in a tight loop under some failure scenarios.
retry.backoff.ms  = 100

;The size of the TCP send buffer (SO_SNDBUF) to use when sending data.
; If the value is -1, the OS default will be used.
send.buffer.bytes = -1
